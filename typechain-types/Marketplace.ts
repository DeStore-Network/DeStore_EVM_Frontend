/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MarketItemStruct = {
  itemId: BigNumberish;
  tokenId: BigNumberish;
  price: BigNumberish;
  isSold: boolean;
  seller: string;
  owner: string;
  nftContract: string;
};

export type MarketItemStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  string,
  string,
  string
] & {
  itemId: BigNumber;
  tokenId: BigNumber;
  price: BigNumber;
  isSold: boolean;
  seller: string;
  owner: string;
  nftContract: string;
};

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "createMarketBuy(address,uint256)": FunctionFragment;
    "createMarketItem(address,uint256,uint256)": FunctionFragment;
    "createMarketSell(address,uint256,uint256)": FunctionFragment;
    "getAllMarketItems()": FunctionFragment;
    "getListingCommision()": FunctionFragment;
    "getMyNFTs(address)": FunctionFragment;
    "getNFT(uint256)": FunctionFragment;
    "getNFTsCreated()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMarketBuy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSell",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingCommision",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMyNFTs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTsCreated",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarketBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingCommision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyNFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTsCreated",
    data: BytesLike
  ): Result;

  events: {
    "MarketItemBuy(uint256,uint256,uint256,address,address,address)": EventFragment;
    "MarketItemCreated(uint256,uint256,uint256,address,address,address)": EventFragment;
    "MarketItemSell(uint256,uint256,uint256,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketItemBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemSell"): EventFragment;
}

export type MarketItemBuyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string],
  {
    price: BigNumber;
    itemId: BigNumber;
    tokenId: BigNumber;
    nftContract: string;
    seller: string;
    buyer: string;
  }
>;

export type MarketItemBuyEventFilter = TypedEventFilter<MarketItemBuyEvent>;

export type MarketItemCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string],
  {
    price: BigNumber;
    itemId: BigNumber;
    tokenId: BigNumber;
    nftContract: string;
    seller: string;
    owner: string;
  }
>;

export type MarketItemCreatedEventFilter =
  TypedEventFilter<MarketItemCreatedEvent>;

export type MarketItemSellEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string],
  {
    price: BigNumber;
    itemId: BigNumber;
    tokenId: BigNumber;
    nftContract: string;
    seller: string;
    owner: string;
  }
>;

export type MarketItemSellEventFilter = TypedEventFilter<MarketItemSellEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMarketBuy(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarketSell(
      nftContract: string,
      itemId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllMarketItems(
      overrides?: CallOverrides
    ): Promise<[MarketItemStructOutput[]]>;

    getListingCommision(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMyNFTs(
      MyAddress: string,
      overrides?: CallOverrides
    ): Promise<[MarketItemStructOutput[]]>;

    getNFT(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MarketItemStructOutput]>;

    getNFTsCreated(
      overrides?: CallOverrides
    ): Promise<[MarketItemStructOutput[]]>;
  };

  createMarketBuy(
    nftContract: string,
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarketItem(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarketSell(
    nftContract: string,
    itemId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllMarketItems(
    overrides?: CallOverrides
  ): Promise<MarketItemStructOutput[]>;

  getListingCommision(overrides?: CallOverrides): Promise<BigNumber>;

  getMyNFTs(
    MyAddress: string,
    overrides?: CallOverrides
  ): Promise<MarketItemStructOutput[]>;

  getNFT(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MarketItemStructOutput>;

  getNFTsCreated(overrides?: CallOverrides): Promise<MarketItemStructOutput[]>;

  callStatic: {
    createMarketBuy(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketSell(
      nftContract: string,
      itemId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllMarketItems(
      overrides?: CallOverrides
    ): Promise<MarketItemStructOutput[]>;

    getListingCommision(overrides?: CallOverrides): Promise<BigNumber>;

    getMyNFTs(
      MyAddress: string,
      overrides?: CallOverrides
    ): Promise<MarketItemStructOutput[]>;

    getNFT(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MarketItemStructOutput>;

    getNFTsCreated(
      overrides?: CallOverrides
    ): Promise<MarketItemStructOutput[]>;
  };

  filters: {
    "MarketItemBuy(uint256,uint256,uint256,address,address,address)"(
      price?: null,
      itemId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      nftContract?: string | null,
      seller?: null,
      buyer?: null
    ): MarketItemBuyEventFilter;
    MarketItemBuy(
      price?: null,
      itemId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      nftContract?: string | null,
      seller?: null,
      buyer?: null
    ): MarketItemBuyEventFilter;

    "MarketItemCreated(uint256,uint256,uint256,address,address,address)"(
      price?: null,
      itemId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      nftContract?: string | null,
      seller?: null,
      owner?: null
    ): MarketItemCreatedEventFilter;
    MarketItemCreated(
      price?: null,
      itemId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      nftContract?: string | null,
      seller?: null,
      owner?: null
    ): MarketItemCreatedEventFilter;

    "MarketItemSell(uint256,uint256,uint256,address,address,address)"(
      price?: null,
      itemId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      nftContract?: string | null,
      seller?: null,
      owner?: null
    ): MarketItemSellEventFilter;
    MarketItemSell(
      price?: null,
      itemId?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      nftContract?: string | null,
      seller?: null,
      owner?: null
    ): MarketItemSellEventFilter;
  };

  estimateGas: {
    createMarketBuy(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarketSell(
      nftContract: string,
      itemId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    getListingCommision(overrides?: CallOverrides): Promise<BigNumber>;

    getMyNFTs(MyAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNFT(itemId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getNFTsCreated(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarketBuy(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarketSell(
      nftContract: string,
      itemId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListingCommision(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyNFTs(
      MyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFT(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTsCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
